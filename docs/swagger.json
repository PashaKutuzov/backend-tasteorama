{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Recipies app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of recipes app"
  },
  "servers": [
    {
      "url": "https://backend-tasteorama.onrender.com",
      "description": "Production server"
    },
    {
      "url": "http://127.0.0.1:8080",
      "description": "Local development server"
    }
  ],
  "tags": [
    {
      "name": "Recipies",
      "description": "Operations about recipies."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipe by id",
        "operationId": "getRecipeById",
        "description": "Get recipe by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get recipe by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipe with id 65ca67e7ae7f10c88b598384!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipes not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Recipes"
        ],
        "summary": "Update recipe",
        "operationId": "updateRecipe",
        "description": "Update recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "681b6a51254a7a7996d15746"
            },
            "description": "The unique identifier of the recipe to be updated."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "_id",
                  "title",
                  "category",
                  "description",
                  "instructions",
                  "timestamps"
                ],
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "Recipe ID",
                    "example": "68419ace9cd45e2f9773af01"
                  },
                  "title": {
                    "type": "string",
                    "description": "The full name of the recipe",
                    "example": "BreakFest"
                  },
                  "category": {
                    "type": "string",
                    "description": "The full name of the category",
                    "enum": [
                      "Seafood",
                      "Lamb",
                      "Starter",
                      "Chicken",
                      "Beef",
                      "Dessert",
                      "Vegan",
                      "Pork",
                      "Vegetarian",
                      "Miscellaneous",
                      "Pasta",
                      "Breakfast",
                      "Side",
                      "Goat",
                      "Soup"
                    ],
                    "example": "Chicken"
                  },
                  "description": {
                    "type": "string",
                    "description": "The full name of the description",
                    "example": "Chicken"
                  },
                  "instructions": {
                    "type": "string",
                    "description": "The full name of the preparation steps",
                    "example": "Cut and fry the chicken"
                  },
                  "timestamps": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Recipe last updated date",
                    "example": "2025-06-05T13:25:34.340+00:00"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated a recipe",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a recipe!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Delete recipe by id",
        "operationId": "deleteContact",
        "description": "Delete recipe by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "681b6a51254a7a7996d15746"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted recipe. No content returned."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get list of Recipes",
        "operationId": "getRecipes",
        "description": "Get list of recipes with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "_id"
            },
            "description": "All recipes fields can be used. Default is `_id`."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": [
                "Seafood",
                "Lamb",
                "Starter",
                "Chicken",
                "Beef",
                "Dessert",
                "Vegan",
                "Pork",
                "Vegetarian",
                "Miscellaneous",
                "Pasta",
                "Breakfast",
                "Side",
                "Goat",
                "Soup"
              ],
              "example": "Breakfast"
            },
            "description": "Filter recipes by category."
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "BreakFest"
            },
            "description": "Filter recipes by title."
          },
          {
            "in": "query",
            "name": "ingredients",
            "schema": {
              "type": "string",
              "enum": [
                "Squid",
                "Cabbage",
                "Baking Powder",
                "Smoked Haddock",
                "Pears",
                "Spring Onions",
                "Ginger Cordial",
                "Almond Extract",
                "Tinned Tomatos",
                "Minced Beef",
                "Gruyère",
                "Powdered Sugar",
                "Stilton Cheese",
                "Pork",
                "Sake",
                "Cayenne Pepper",
                "Jalapeno",
                "Barbeque Sauce",
                "Scotch Bonnet",
                "Haddock"
              ],
              "example": "Pork"
            },
            "description": "Filter recipes by ingredient."
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "example": "A tasty chicken dish."
            },
            "description": "Filter recipes by description."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found recipes!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 2
                        },
                        "perPage": {
                          "type": "number",
                          "example": 4
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 4
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipes not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipes not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create recipe",
        "operationId": "createRecipe",
        "description": "Create Recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "userId",
                  "title",
                  "category",
                  "instructions",
                  "description",
                  "timestamps",
                  "ingredients"
                ],
                "properties": {
                  "userId": {
                    "type": "string",
                    "description": "Recipe ID",
                    "example": "68419ace9cd45e2f9773af01"
                  },
                  "title": {
                    "type": "string",
                    "description": "The full name of the recipe",
                    "example": "BreakFest"
                  },
                  "category": {
                    "type": "string",
                    "description": "The full name of the category",
                    "enum": [
                      "Seafood",
                      "Lamb",
                      "Starter",
                      "Chicken",
                      "Beef",
                      "Dessert",
                      "Vegan",
                      "Pork",
                      "Vegetarian",
                      "Miscellaneous",
                      "Pasta",
                      "Breakfast",
                      "Side",
                      "Goat",
                      "Soup"
                    ],
                    "example": "Chicken"
                  },
                  "ingredients": {
                    "type": "array",
                    "description": "List of recipe ingredients",
                    "items": {
                      "type": "string",
                      "enum": [
                        "Squid",
                        "Cabbage",
                        "Baking Powder",
                        "Smoked Haddock",
                        "Pears",
                        "Spring Onions",
                        "Ginger Cordial",
                        "Almond Extract",
                        "Tinned Tomatos",
                        "Minced Beef",
                        "Gruyère",
                        "Powdered Sugar",
                        "Stilton Cheese",
                        "Pork",
                        "Sake",
                        "Cayenne Pepper",
                        "Jalapeno",
                        "Barbeque Sauce",
                        "Scotch Bonnet",
                        "Haddock"
                      ]
                    },
                    "example": [
                      "Pork",
                      "Tinned Tomatos"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "The full name of the description",
                    "example": "A tasty chicken dish."
                  },
                  "instructions": {
                    "type": "string",
                    "description": "The full name of the preparation steps",
                    "example": "Cut and fry the chicken"
                  },
                  "timestamps": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Recipe creation timestamp",
                    "example": "2025-06-05T13:25:34.340+00:00"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a recipe",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a recipe!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/user": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get list of user's recipes",
        "operationId": "getUserRecipes",
        "description": "Get list of recipes created by the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "_id"
            },
            "description": "All recipe fields can be used. Default is `_id`."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": [
                "Seafood",
                "Lamb",
                "Starter",
                "Chicken",
                "Beef",
                "Dessert",
                "Vegan",
                "Pork",
                "Vegetarian",
                "Miscellaneous",
                "Pasta",
                "Breakfast",
                "Side",
                "Goat",
                "Soup"
              ],
              "example": "Breakfast"
            },
            "description": "Filter recipes by category."
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "BreakFest"
            },
            "description": "Filter recipes by title."
          },
          {
            "in": "query",
            "name": "ingredients",
            "schema": {
              "type": "string",
              "example": "Pork"
            },
            "description": "Filter recipes by ingredient (single value or comma-separated list)."
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "example": "A tasty chicken dish."
            },
            "description": "Filter recipes by description."
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found user's recipes!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user's recipes!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 2
                        },
                        "perPage": {
                          "type": "number",
                          "example": 4
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 4
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 1
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": false
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipes not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipes not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/favorite": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get list of user's favorite recipes",
        "operationId": "getUserFavoriteRecipes",
        "description": "Get list of favorite recipes added by the authenticated user",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "integer",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "_id"
            },
            "description": "Sort by any recipe field. Default is `_id`."
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ],
              "example": "asc"
            }
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "enum": [
                "Seafood",
                "Lamb",
                "Starter",
                "Chicken",
                "Beef",
                "Dessert",
                "Vegan",
                "Pork",
                "Vegetarian",
                "Miscellaneous",
                "Pasta",
                "Breakfast",
                "Side",
                "Goat",
                "Soup"
              ],
              "example": "Breakfast"
            },
            "description": "Filter recipes by category"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string",
              "example": "BreakFest"
            },
            "description": "Filter recipes by title (partial match)"
          },
          {
            "in": "query",
            "name": "ingredients",
            "schema": {
              "type": "string",
              "example": "Pork"
            },
            "description": "Filter recipes by ingredient (single value or comma-separated list)"
          },
          {
            "in": "query",
            "name": "description",
            "schema": {
              "type": "string",
              "example": "A tasty chicken dish."
            },
            "description": "Filter recipes by description (partial match)"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found user's favorite recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found user's favorite recipes"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "data",
                        "page",
                        "perPage",
                        "totalItems",
                        "totalPages",
                        "hasNextPage",
                        "hasPreviousPage"
                      ],
                      "properties": {
                        "data": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/recipe"
                          }
                        },
                        "page": {
                          "type": "number",
                          "example": 1
                        },
                        "perPage": {
                          "type": "number",
                          "example": 10
                        },
                        "totalItems": {
                          "type": "number",
                          "example": 15
                        },
                        "totalPages": {
                          "type": "number",
                          "example": 2
                        },
                        "hasNextPage": {
                          "type": "boolean",
                          "example": true
                        },
                        "hasPreviousPage": {
                          "type": "boolean",
                          "example": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Favorite recipes not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Favorite recipes not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Add recipe to favorites",
        "operationId": "addRecipeToFavorites",
        "description": "Add an existing recipe to the user's list of favorite recipes",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "recipeId"
                ],
                "properties": {
                  "recipeId": {
                    "type": "string",
                    "description": "ID of the recipe to add to favorites",
                    "example": "68419ace9cd45e2f9773af01"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully added recipe to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe added to favorites successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "example": "123456789abcdef"
                        },
                        "favorites": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": [
                            "68419ace9cd45e2f9773af01",
                            "71cf38ed6b354c63bc0012c8"
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipe not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/recipes/favorite/{id}": {
      "delete": {
        "tags": [
          "Recipes"
        ],
        "summary": "Remove recipe from favorites",
        "operationId": "removeRecipeFromFavorites",
        "description": "Remove a recipe from the user's list of favorite recipes by ID",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "681b6a51254a7a7996d15746"
            },
            "description": "ID of the recipe to remove from favorites"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully removed recipe from favorites. No content returned."
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "description": "Recipe not found in favorites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Recipe not found in favorites"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/categories": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all recipe categories",
        "operationId": "getAllRecipeCategories",
        "description": "Get a list of all available recipe categories",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved recipe categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved recipe categories"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "Seafood",
                          "Lamb",
                          "Starter",
                          "Chicken",
                          "Beef",
                          "Dessert",
                          "Vegan",
                          "Pork",
                          "Vegetarian",
                          "Miscellaneous",
                          "Pasta",
                          "Breakfast",
                          "Side",
                          "Goat",
                          "Soup"
                        ]
                      },
                      "example": [
                        "Chicken",
                        "Vegan",
                        "Dessert"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/ingredients": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get all recipe ingredients",
        "operationId": "getAllRecipeIngredients",
        "description": "Get a list of all available recipe ingredients",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved recipe ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully retrieved recipe ingredients"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "Squid",
                          "Cabbage",
                          "Baking Powder",
                          "Smoked Haddock",
                          "Pears",
                          "Spring Onions",
                          "Ginger Cordial",
                          "Almond Extract",
                          "Tinned Tomatos",
                          "Minced Beef",
                          "Gruyère",
                          "Powdered Sugar",
                          "Stilton Cheese",
                          "Pork",
                          "Sake",
                          "Cayenne Pepper",
                          "Jalapeno",
                          "Barbeque Sauce",
                          "Scotch Bonnet",
                          "Haddock"
                        ]
                      },
                      "example": [
                        "Pork",
                        "Tinned Tomatos",
                        "Cayenne Pepper"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current authenticated user",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User info retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User info retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/currentUser"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User Registration",
        "operationId": "registerUser",
        "description": "**User Registration**\n\nThis endpoint allows new users to register an account by providing essential information.\n\n### Required Fields\n- **Name**: The full name of the user.\n- **Email**: A valid email address that will be used for login and communication.\n- **Password**: A secure password for the user's account.\n- **Privacy Policy Accepted At**: ISO 8601 date-time string indicating when the user accepted the privacy policy.\n\n### Optional Fields\n- There are no optional fields for this endpoint. All fields are required.\n\n### How to Use\n- **Name**: Enter the user's full name.\n- **Email**: Provide a unique email address for the user.\n- **Password**: Choose a strong password for the user’s account.\n- **Privacy Policy Accepted At**: Provide the date/time the user accepted the privacy policy.\n\nAfter successful registration, the user will receive a confirmation response with details of the newly created account.\n\n### Security\n- This endpoint does not require authentication. You can access this endpoint directly to register a new user.\n",
        "security": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "email",
                  "password",
                  "privacyPolicyAcceptedAt"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The user's full name.",
                    "example": "User One"
                  },
                  "email": {
                    "type": "string",
                    "description": "The user's email address.",
                    "example": "userone@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "The user's password.",
                    "example": "123Qwe!xX"
                  },
                  "privacyPolicyAcceptedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp when user accepted the privacy policy.",
                    "example": "2025-06-28T12:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201"
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User Login",
        "operationId": "loginUser",
        "description": "**User Login**\n\nThis endpoint allows registered users to log in to their account by providing their email and password.\n\n### Required Fields\n- **Email**: The email address associated with the user's account.\n- **Password**: The password for the user's account.\n- **Privacy Policy Accepted At**: ISO 8601 date-time string indicating when user accepted the privacy policy.\n\n### How to Use\n- **Email**: Enter the email address used during registration.\n- **Password**: Provide the password associated with the email address.\n- **Privacy Policy Accepted At**: Usually sent during registration, but may be required in specific flows.\n\nUpon successful login, the response will include an access token that can be used to authenticate further requests.\n\n### Security\n- This endpoint does not require authentication for accessing the login functionality.\n",
        "security": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email address associated with the user's account.",
                    "example": "userone@example.com"
                  },
                  "password": {
                    "type": "string",
                    "description": "The password for the user's account.",
                    "example": "123Qwe!xX"
                  },
                  "privacyPolicyAcceptedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp when user accepted the privacy policy.",
                    "example": "2025-06-28T12:00:00.000Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "**Successfully Logged In**\n\nThe login was successful, and an access token has been provided. Use this token for subsequent authenticated requests.\n",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200,
                      "description": "HTTP status code indicating a successful login"
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in!",
                      "description": "Confirmation message indicating successful login"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9",
                          "description": "The access token to be used for authenticated requests"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh session accessToken",
        "operationId": "refresh",
        "description": "Refresh session accessToken",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "Log out a user",
        "security": [],
        "responses": {
          "204": {
            "description": "**No Content**\n\nThe user was successfully logged out. There is no content in the response body, only the status code 204 indicating a successful logout.\n",
            "content": {}
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "recipe": {
        "type": "object",
        "required": [
          "userId",
          "title",
          "category",
          "instructions",
          "description",
          "timestamps",
          "ingredients"
        ],
        "properties": {
          "userId": {
            "type": "string",
            "description": "Recipe ID",
            "example": "68419ace9cd45e2f9773af01"
          },
          "title": {
            "type": "string",
            "description": "The full name of the recipe",
            "example": "BreakFest"
          },
          "category": {
            "type": "string",
            "description": "The full name of the category",
            "enum": [
              "Seafood",
              "Lamb",
              "Starter",
              "Chicken",
              "Beef",
              "Dessert",
              "Vegan",
              "Pork",
              "Vegetarian",
              "Miscellaneous",
              "Pasta",
              "Breakfast",
              "Side",
              "Goat",
              "Soup"
            ],
            "example": "Chicken"
          },
          "ingredients": {
            "type": "array",
            "description": "List of recipe ingredients",
            "items": {
              "type": "string",
              "enum": [
                "Squid",
                "Cabbage",
                "Baking Powder",
                "Smoked Haddock",
                "Pears",
                "Spring Onions",
                "Ginger Cordial",
                "Almond Extract",
                "Tinned Tomatos",
                "Minced Beef",
                "Gruyère",
                "Powdered Sugar",
                "Stilton Cheese",
                "Pork",
                "Sake",
                "Cayenne Pepper",
                "Jalapeno",
                "Barbeque Sauce",
                "Scotch Bonnet",
                "Haddock"
              ]
            },
            "example": [
              "Pork",
              "Tinned Tomatos"
            ]
          },
          "description": {
            "type": "string",
            "description": "The full name of the description",
            "example": "A tasty chicken dish."
          },
          "instructions": {
            "type": "string",
            "description": "The full name of the preparation steps",
            "example": "Cut and fry the chicken"
          },
          "timestamps": {
            "type": "string",
            "format": "date-time",
            "description": "Recipe last updated date",
            "example": "2025-06-05T13:25:34.340+00:00"
          }
        }
      },
      "currentUser": {
        "type": "object",
        "required": [
          "name",
          "email",
          "privacyPolicyAcceptedAt",
          "favorites",
          "myRecipes"
        ],
        "properties": {
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "User One"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "user@example.com"
          },
          "privacyPolicyAcceptedAt": {
            "description": "Accept privacy Policy",
            "type": "string",
            "format": "date-time",
            "example": "2025-06-28T14:55:00Z"
          },
          "favorites": {
            "description": "Array of favorite recipe IDs",
            "type": "array",
            "items": {
              "type": "string",
              "example": "64a1b2c3e25d8c90e88d5678"
            }
          },
          "myRecipes": {
            "description": "Array of recipe IDs created by user",
            "type": "array",
            "items": {
              "type": "string",
              "example": "64a1c9f4d23b7d90f12a9a4c"
            }
          }
        }
      }
    },
    "responses": {
      "201": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 201
                },
                "message": {
                  "type": "string",
                  "example": "Successfully registered a user!"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "_id",
                    "name",
                    "email",
                    "privacyPolicyAcceptedAt"
                  ],
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "66cf9e011ecc457ea69ab77d"
                    },
                    "name": {
                      "type": "string",
                      "example": "User One"
                    },
                    "email": {
                      "type": "string",
                      "example": "userone@mail.com"
                    },
                    "privacyPolicyAcceptedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-06-28T12:00:00.000Z"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not Found - Session or Authorization header not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404,
                  "description": "HTTP status code"
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError",
                  "description": "Error message indicating that the resource was not found"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Session not found",
                      "description": "Detailed message about the missing session or header"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "examples": {
              "no_token": {
                "summary": "Session not found",
                "value": {
                  "status": 404,
                  "message": "NotFoundError",
                  "data": {
                    "message": "Session not found"
                  }
                }
              },
              "token_expired": {
                "summary": "Authorization header not found",
                "value": {
                  "status": 404,
                  "message": "NotFoundError",
                  "data": {
                    "message": "Authorization header not found"
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "**Conflict Error (409)**\n\nThis error occurs when there is a conflict with the current state of the resource.\n- In this case, the conflict arises because the `email` provided is already in use by another account.\n",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP status code indicating the error type.",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "description": "A brief summary of the conflict error.",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message",
                    "errors"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Specific details about the error, such as the conflicting field.",
                      "example": "Email already in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal Server error"
                }
              }
            }
          }
        }
      }
    }
  }
}